{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, Component, Input, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\nconst _c0 = function (a0, a1, a2, a3) {\n  return {\n    \"width.%\": a0,\n    \"column-count\": a1,\n    \"column-gap.px\": a2,\n    \"column-width.px\": a3\n  };\n};\n\nconst _c1 = [\"*\"];\n\nclass MasonryService {\n  constructor() {}\n\n}\n\nMasonryService.ɵfac = function MasonryService_Factory(t) {\n  return new (t || MasonryService)();\n};\n\nMasonryService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: MasonryService,\n  factory: MasonryService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MasonryService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n\nclass MasonryComponent {\n  constructor() {}\n\n  ngOnInit() {}\n\n}\n\nMasonryComponent.ɵfac = function MasonryComponent_Factory(t) {\n  return new (t || MasonryComponent)();\n};\n\nMasonryComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MasonryComponent,\n  selectors: [[\"lib-masonry\"]],\n  inputs: {\n    noOfColumns: \"noOfColumns\",\n    columnWidth: \"columnWidth\",\n    totalWidth: \"totalWidth\",\n    gutter: \"gutter\",\n    data: \"data\"\n  },\n  ngContentSelectors: _c1,\n  decls: 2,\n  vars: 6,\n  consts: [[1, \"container\", 3, \"ngStyle\"]],\n  template: function MasonryComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵprojection(1);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction4(1, _c0, ctx.totalWidth, ctx.noOfColumns, ctx.gutter, ctx.columnWidth));\n    }\n  },\n  directives: [i1.NgStyle],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MasonryComponent, [{\n    type: Component,\n    args: [{\n      selector: 'lib-masonry',\n      template: `\n  <div\n    [ngStyle]=\"{\n      'width.%': totalWidth,\n      'column-count': noOfColumns,\n      'column-gap.px': gutter,\n      'column-width.px': columnWidth\n    }\"\n    class=\"container\"\n  >\n    <ng-content></ng-content>\n  </div>\n`,\n      styles: []\n    }]\n  }], function () {\n    return [];\n  }, {\n    noOfColumns: [{\n      type: Input\n    }],\n    columnWidth: [{\n      type: Input\n    }],\n    totalWidth: [{\n      type: Input\n    }],\n    gutter: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }]\n  });\n})();\n\nclass MasonryModule {}\n\nMasonryModule.ɵfac = function MasonryModule_Factory(t) {\n  return new (t || MasonryModule)();\n};\n\nMasonryModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MasonryModule\n});\nMasonryModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MasonryModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [MasonryComponent],\n      imports: [CommonModule],\n      exports: [MasonryComponent]\n    }]\n  }], null, null);\n})();\n/*\n * Public API Surface of masonry\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MasonryComponent, MasonryModule, MasonryService };","map":{"version":3,"names":["i0","Injectable","Component","Input","NgModule","i1","CommonModule","MasonryService","constructor","ɵfac","ɵprov","type","args","providedIn","MasonryComponent","ngOnInit","ɵcmp","NgStyle","selector","template","styles","noOfColumns","columnWidth","totalWidth","gutter","data","MasonryModule","ɵmod","ɵinj","declarations","imports","exports"],"sources":["/Users/siddharthasingh/Desktop/wipro/ng/create-reusable-masnory-layout-component/Task2-KeepNoteApp/node_modules/@siddhartha_singh/masonry/fesm2015/siddhartha_singh-masonry.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, Component, Input, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\nclass MasonryService {\n    constructor() { }\n}\nMasonryService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.5\", ngImport: i0, type: MasonryService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nMasonryService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.5\", ngImport: i0, type: MasonryService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.5\", ngImport: i0, type: MasonryService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return []; } });\n\nclass MasonryComponent {\n    constructor() { }\n    ngOnInit() { }\n}\nMasonryComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.5\", ngImport: i0, type: MasonryComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nMasonryComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.5\", type: MasonryComponent, selector: \"lib-masonry\", inputs: { noOfColumns: \"noOfColumns\", columnWidth: \"columnWidth\", totalWidth: \"totalWidth\", gutter: \"gutter\", data: \"data\" }, ngImport: i0, template: `\n  <div\n    [ngStyle]=\"{\n      'width.%': totalWidth,\n      'column-count': noOfColumns,\n      'column-gap.px': gutter,\n      'column-width.px': columnWidth\n    }\"\n    class=\"container\"\n  >\n    <ng-content></ng-content>\n  </div>\n`, isInline: true, directives: [{ type: i1.NgStyle, selector: \"[ngStyle]\", inputs: [\"ngStyle\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.5\", ngImport: i0, type: MasonryComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'lib-masonry',\n                    template: `\n  <div\n    [ngStyle]=\"{\n      'width.%': totalWidth,\n      'column-count': noOfColumns,\n      'column-gap.px': gutter,\n      'column-width.px': columnWidth\n    }\"\n    class=\"container\"\n  >\n    <ng-content></ng-content>\n  </div>\n`,\n                    styles: []\n                }]\n        }], ctorParameters: function () { return []; }, propDecorators: { noOfColumns: [{\n                type: Input\n            }], columnWidth: [{\n                type: Input\n            }], totalWidth: [{\n                type: Input\n            }], gutter: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }] } });\n\nclass MasonryModule {\n}\nMasonryModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.5\", ngImport: i0, type: MasonryModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMasonryModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.5\", ngImport: i0, type: MasonryModule, declarations: [MasonryComponent], imports: [CommonModule], exports: [MasonryComponent] });\nMasonryModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.5\", ngImport: i0, type: MasonryModule, imports: [[\n            CommonModule\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.5\", ngImport: i0, type: MasonryModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        MasonryComponent\n                    ],\n                    imports: [\n                        CommonModule\n                    ],\n                    exports: [\n                        MasonryComponent\n                    ]\n                }]\n        }] });\n\n/*\n * Public API Surface of masonry\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MasonryComponent, MasonryModule, MasonryService };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}